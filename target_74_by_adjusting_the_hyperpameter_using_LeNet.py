# -*- coding: utf-8 -*-
"""Target 74% by adjusting the hyperpameter(feat.LeNet)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TKfWf8wjKhBsOMkQARVHP1utcC4bq3GS
"""

# 관련 패키지 import 
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

# CIFAR-10 데이터셋 
cifar_train = torchvision.datasets.CIFAR10(root='./data', train=True, download=True)
image, label = cifar_train[1]
plt.imshow(image)
print(label)
plt.show()

# Device configuration, gpu 사용 가능한 경우 device를 gpu로 설정하고 사용 불가능하면 cpu로 설정
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(device)

# Hyper-parameters 
num_classes = 10
num_epochs = 100
batch_size = 100
learning_rate = 0.001

# Data PreProcessing
transforms_train = transforms.Compose([
                        transforms.RandomCrop(32, padding=4),
                        transforms.RandomHorizontalFlip(),
                        transforms.ToTensor(),
                        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
                    ])
transforms_test = transforms.Compose([
                        transforms.ToTensor(),
                        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
                    ])

# 파이토치에서 제공하는 CIFAR10 dataset
train_dev_dataset = torchvision.datasets.CIFAR10(root='./data',train=True, 
                                            transform=transforms_train, download=True)
test_dataset = torchvision.datasets.CIFAR10(root='./data', train=False, 
                                            transform=transforms_test, download=True)
train_dataset, dev_dataset = torch.utils.data.random_split(train_dev_dataset, [45000, 5000])

# 배치 단위로 데이터를 처리해주는 Data loader
train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                          batch_size=batch_size,
                                          shuffle=True)
dev_loader = torch.utils.data.DataLoader(dataset=dev_dataset, 
                                         batch_size=batch_size,
                                         shuffle=False)
test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                         batch_size=batch_size,
                                         shuffle=False)

class LeNet(nn.Module):
    def __init__(self, num_classes):
        super(LeNet, self).__init__()
        self.layer = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=6, kernel_size=3,padding=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2),
            nn.Conv2d(in_channels=6, out_channels=16, kernel_size=3,padding=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2),
        )
       
        # self.fc_layer = nn.Sequential(
        #     nn.Linear(16 * 5 * 5, 120),
        #     nn.ReLU(),
        #     nn.Linear(120, 84),
        #     nn.ReLU(),
        #     nn.Linear(84, num_classes),
        # )

        self.fc1 = nn.Linear(16 * 8 * 8, 360)
        nn.init.kaiming_normal_(self.fc1.weight)
        nn.init.zeros_(self.fc1.bias)
        self.fc2 = nn.Linear(360,240)
        nn.init.kaiming_normal_(self.fc2.weight)
        nn.init.zeros_(self.fc2.bias)
        self.fc3 = nn.Linear(240,120)
        nn.init.kaiming_normal_(self.fc3.weight)
        nn.init.zeros_(self.fc3.bias)
        self.fc4 = nn.Linear(120,84)
        nn.init.kaiming_normal_(self.fc4.weight)
        nn.init.zeros_(self.fc4.bias)
        self.fc5 = nn.Linear(84,42)
        nn.init.kaiming_normal_(self.fc5.weight)
        nn.init.zeros_(self.fc5.bias) 
        self.fc6 = nn.Linear(42,num_classes)
        nn.init.kaiming_normal_(self.fc6.weight)
        nn.init.zeros_(self.fc6.bias)
        
        for m in self.modules(): 
          if isinstance(m, nn.Conv2d):
            nn.init.kaiming_normal_(m.weight)

    def forward(self, x):
        batch_size = x.shape[0]
        out = self.layer(x)
        out = out.view(batch_size, -1)
        out = F.relu(self.fc1(out))
        out = F.relu(self.fc2(out))
        out = F.relu(self.fc3(out))
        out = F.relu(self.fc4(out))
        out = F.relu(self.fc5(out))
        out = self.fc6(out)
        return out

model = LeNet(num_classes).to(device) # 모델을 지정한 device로 올려줌

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
# model.parameters -> 가중치 w들을 의미

def evaluation(data_loader):
    correct = 0
    total = 0
    for images, labels in data_loader:
        images = images.to(device) 
        labels = labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
    return correct/total

loss_arr = []
max = 0.0
total_step = len(train_loader)

for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        model.train()
        # Move tensors to the configured device
        images = images.to(device)
        labels = labels.to(device)
        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)
        # Backward and optimize
        optimizer.zero_grad() # iteration 마다 gradient를 0으로 초기화
        loss.backward() # 가중치 w에 대해 loss를 미분
        optimizer.step() # 가중치들을 업데이트

        if (i+1) % 100 == 0:
            loss_arr.append(loss)
            print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'
                    .format(epoch+1, num_epochs, i+1, total_step, loss.item()))
            with torch.no_grad():
                model.eval()
                acc = evaluation(dev_loader)
                if max < acc :
                    max = acc 
                    print("max dev accuracy: ", max)
                    torch.save(model.state_dict(), 'model.ckpt')

with torch.no_grad():
    last_acc = evaluation(test_loader)
    print('Last Accuracy of the network on the 10000 test images : {} %'.format(last_acc*100))

    model.load_state_dict(torch.load('model.ckpt'))
    best_acc = evaluation(test_loader)
    print('Best Accuracy of the network on the 10000 test images : {} %'.format(best_acc*100))

# Save the model checkpoint
plt.plot(loss_arr)
plt.show()

