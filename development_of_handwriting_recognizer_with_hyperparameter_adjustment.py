# -*- coding: utf-8 -*-
"""Development of handwriting recognizer with hyperparameter adjustment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a0mYobxRNtnjLOQAaK7yoFjm453ZCCXn
"""

# 관련 패키지 import 
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

# Device configuration, gpu 사용 가능한 경우 device를 gpu로 설정하고 사용 불가능하면 cpu로 설정
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Hyper-parameters  
# layer number 3->4 
input_size = 784
hidden_size = 300 #500 -> 300
num_classes = 10
num_epochs = 10
batch_size = 50 # 100 -> 50 
drop_prob = 0.3 # 0.5 -> 0.3  
weight_decay_lambda = 0.01
learning_rate = 0.001 #0.0001 -> 0.001

# 파이토치에서 제공하는 MNIST dataset
train_dev_dataset = torchvision.datasets.MNIST(root='./data',train=True, 
                                           transform=transforms.ToTensor(), download=True)
train_dataset, dev_dataset = torch.utils.data.random_split(train_dev_dataset, [50000, 10000])
test_dataset = torchvision.datasets.MNIST(root='./data', train=False, 
                                          transform=transforms.ToTensor())

# 배치 단위로 데이터를 처리해주는 Data loader
train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                          batch_size=batch_size,
                                          shuffle=True)
dev_loader = torch.utils.data.DataLoader(dataset=dev_dataset, 
                                         batch_size=batch_size,
                                         shuffle=False)
test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                         batch_size=batch_size,
                                         shuffle=False)

class NeuralNet(nn.Module):
  def __init__(self, input_size, hidden_size, num_classes):
    super(NeuralNet, self).__init__()
    self.fc1 = nn.Linear(input_size, hidden_size)
    torch.nn.init.kaiming_normal_(self.fc1.weight)
    torch.nn.init.zeros_(self.fc1.bias)
    self.fc2 = nn.Linear(hidden_size, hidden_size)
    torch.nn.init.kaiming_normal_(self.fc2.weight)
    torch.nn.init.zeros_(self.fc2.bias)
    self.fc3 = nn.Linear(hidden_size, hidden_size)
    torch.nn.init.kaiming_normal_(self.fc3.weight)
    torch.nn.init.zeros_(self.fc3.bias)
    self.fc4 = nn.Linear(hidden_size, num_classes)
    torch.nn.init.kaiming_normal_(self.fc4.weight)
    torch.nn.init.zeros_(self.fc4.bias)
    
    self.dropout = nn.Dropout(drop_prob)

  def forward(self, x):
    out = F.relu(self.fc1(x))
    out = self.dropout(out)
    out = F.relu(self.fc2(out))
    out = self.dropout(out)
    out = F.relu(self.fc3(out))
    out = self.dropout(out)
    out = self.fc4(out)
    return out

model = NeuralNet(input_size, hidden_size, num_classes).to(device) # 모델을 지정한 device로 올려줌

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay_lambda)
# model.parameters -> 가중치 w들을 의미

def evaluation(data_loader):
  correct = 0
  total = 0
  for images, labels in data_loader:
    images = images.reshape(-1, 28*28).to(device) 
    labels = labels.to(device)
    outputs = model(images)
    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum().item()
  return correct/total

loss_arr = []
max = 0.0
total_step = len(train_loader)

for epoch in range(num_epochs):
  for i, (images, labels) in enumerate(train_loader):
    model.train()
    # Move tensors to the configured device
    images = images.reshape(-1, 28*28).to(device)
    labels = labels.to(device)
    # Forward pass
    outputs = model(images)
    loss = criterion(outputs, labels)
    # Backward and optimize
    optimizer.zero_grad() # iteration 마다 gradient를 0으로 초기화
    loss.backward() # 가중치 w에 대해 loss를 미분
    optimizer.step() # 가중치들을 업데이트

    if (i+1) % 100 == 0:
      loss_arr.append(loss)
      print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'
          .format(epoch+1, num_epochs, i+1, total_step, loss.item()))
      with torch.no_grad():
          model.eval()
          acc = evaluation(dev_loader)
          if max < acc :
              max = acc 
              print("max dev accuracy: ", max)
              torch.save(model.state_dict(), 'model.ckpt')

with torch.no_grad():
    last_acc = evaluation(test_loader)
    print('Last Accuracy of the network on the 10000 test images : {} %'.format(last_acc*100))

    model.load_state_dict(torch.load('model.ckpt'))
    best_acc = evaluation(test_loader)
    print('Best Accuracy of the network on the 10000 test images : {} %'.format(best_acc*100))

# Save the model checkpoint
torch.save(model.state_dict(), 'model.ckpt')
plt.plot(loss_arr)
plt.show()